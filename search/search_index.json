{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0415\u043b\u0438\u0437\u0430\u0432\u0435\u0442\u0430 \u0418\u0432\u0435\u043d\u043a\u043e\u0432\u0430, \u0433\u0440\u0443\u043f\u043f\u0430 K33422","title":"Home"},{"location":"#k33422","text":"","title":"\u0415\u043b\u0438\u0437\u0430\u0432\u0435\u0442\u0430 \u0418\u0432\u0435\u043d\u043a\u043e\u0432\u0430, \u0433\u0440\u0443\u043f\u043f\u0430 K33422"},{"location":"lab1/ex1/","text":"\u0423\u043f\u0440\u0430\u0436\u0435\u043d\u0435\u043d\u0438\u0435 1 \u041a\u043e\u0434 \u041a\u043b\u0438\u0435\u043d\u0442\u0430 import socket def main(): client_connection = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client_connection.connect(('127.0.0.1', 14900)) client_connection.send(b'Hello, server') server_msg = client_connection.recv(12000).decode('utf-8') print(server_msg) client_connection.close() if __name__ == '__main__': main() \u0421\u0435\u0440\u0432\u0435\u0440\u0430 import socket def main(): client_connection = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client_connection.bind(('127.0.0.1', 14900)) data, client_address = client_connection.recvfrom(12000) decoded_data = data.decode('utf-8') print(decoded_data) client_connection.sendto(b\"Hello, client\", client_address) client_connection.close() if __name__ == '__main__': main()","title":"\u0423\u043f\u0440\u0430\u0436\u0435\u043d\u0435\u043d\u0438\u0435 1"},{"location":"lab1/ex1/#1","text":"","title":"\u0423\u043f\u0440\u0430\u0436\u0435\u043d\u0435\u043d\u0438\u0435 1"},{"location":"lab1/ex1/#_1","text":"","title":"\u041a\u043e\u0434"},{"location":"lab1/ex1/#_2","text":"import socket def main(): client_connection = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client_connection.connect(('127.0.0.1', 14900)) client_connection.send(b'Hello, server') server_msg = client_connection.recv(12000).decode('utf-8') print(server_msg) client_connection.close() if __name__ == '__main__': main()","title":"\u041a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"lab1/ex1/#_3","text":"import socket def main(): client_connection = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) client_connection.bind(('127.0.0.1', 14900)) data, client_address = client_connection.recvfrom(12000) decoded_data = data.decode('utf-8') print(decoded_data) client_connection.sendto(b\"Hello, client\", client_address) client_connection.close() if __name__ == '__main__': main()","title":"\u0421\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"lab1/ex2/","text":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 2 \u041a\u043e\u0434 \u041a\u043b\u0438\u0435\u043d\u0442\u0430 import socket import pickle def main(): server_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_connection.connect(('127.0.0.1', 14900)) base = int(input('Base:')) height = int(input('Height:')) parallelogram_data = (base, height) encoded_parallelogram_data = pickle.dumps(parallelogram_data) server_connection.send(encoded_parallelogram_data) server_response_enc = server_connection.recv(12000) server_response_dec = server_response_enc.decode('utf-8') print(f'Parallelogram area: {server_response_dec}') server_connection.close() if __name__ == '__main__': main() \u0421\u0435\u0440\u0432\u0435\u0440\u0430 import socket import pickle def main(): server_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_connection.bind(('127.0.0.1', 14900)) client_connection, address = server_connection.accept() encoded_data = client_connection.recv(12000) base, height = pickle.loads(encoded_data) area = base * height area = round(area, 2) area_encoded = str(area).encode('utf-8') client_connection.send(area_encoded) server_connection.close() if __name__ == '__main__': main()","title":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 2"},{"location":"lab1/ex2/#2","text":"","title":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 2"},{"location":"lab1/ex2/#_1","text":"","title":"\u041a\u043e\u0434"},{"location":"lab1/ex2/#_2","text":"import socket import pickle def main(): server_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_connection.connect(('127.0.0.1', 14900)) base = int(input('Base:')) height = int(input('Height:')) parallelogram_data = (base, height) encoded_parallelogram_data = pickle.dumps(parallelogram_data) server_connection.send(encoded_parallelogram_data) server_response_enc = server_connection.recv(12000) server_response_dec = server_response_enc.decode('utf-8') print(f'Parallelogram area: {server_response_dec}') server_connection.close() if __name__ == '__main__': main()","title":"\u041a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"lab1/ex2/#_3","text":"import socket import pickle def main(): server_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_connection.bind(('127.0.0.1', 14900)) client_connection, address = server_connection.accept() encoded_data = client_connection.recv(12000) base, height = pickle.loads(encoded_data) area = base * height area = round(area, 2) area_encoded = str(area).encode('utf-8') client_connection.send(area_encoded) server_connection.close() if __name__ == '__main__': main()","title":"\u0421\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"lab1/ex3/","text":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 3 \u041a\u043e\u0434 \u0421\u0435\u0440\u0432\u0435\u0440 import socket def get_webpage_response(): response_type = 'HTTP/1.0 200 OK\\n' headers = 'Content-Type: text/html\\n\\n' with open('index.html') as f: content = \"\".join(f.readlines()) response_raw = response_type + headers + content response_encoded = response_raw.encode('utf-8') return response_encoded def main(): server_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_connection.bind(('127.0.0.1', 14900)) server_connection.listen(10) print(f'\u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: 127.0.0.1:14900') while True: try: client_connection, address = server_connection.accept() print(client_connection) webpage_response = get_webpage_response() client_connection.send(webpage_response) except KeyboardInterrupt: break server_connection.close() if __name__ == '__main__': main() index.html <!DOCTYPE html> <html> <head> <title>The best website ever existed</title> </head> <body> Lorem Ipsum Dolor Sit O Met </body> </html>","title":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 3"},{"location":"lab1/ex3/#3","text":"","title":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 3"},{"location":"lab1/ex3/#_1","text":"","title":"\u041a\u043e\u0434"},{"location":"lab1/ex3/#_2","text":"import socket def get_webpage_response(): response_type = 'HTTP/1.0 200 OK\\n' headers = 'Content-Type: text/html\\n\\n' with open('index.html') as f: content = \"\".join(f.readlines()) response_raw = response_type + headers + content response_encoded = response_raw.encode('utf-8') return response_encoded def main(): server_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_connection.bind(('127.0.0.1', 14900)) server_connection.listen(10) print(f'\u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: 127.0.0.1:14900') while True: try: client_connection, address = server_connection.accept() print(client_connection) webpage_response = get_webpage_response() client_connection.send(webpage_response) except KeyboardInterrupt: break server_connection.close() if __name__ == '__main__': main()","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"lab1/ex3/#indexhtml","text":"<!DOCTYPE html> <html> <head> <title>The best website ever existed</title> </head> <body> Lorem Ipsum Dolor Sit O Met </body> </html>","title":"index.html"},{"location":"lab1/ex4/","text":"\u0423\u043f\u0440\u0430\u0436\u0435\u043d\u0435\u043d\u0438\u0435 4 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u041a\u043b\u0438\u0435\u043d\u0442\u0430 \u041a\u043b\u0438\u0435\u043d\u0442 \u0438\u043c\u0435\u0435\u0442 2 \u043f\u043e\u0442\u043e\u043a\u0430. \u041e\u0434\u0438\u043d \u0434\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u0414\u0440\u0443\u0433\u043e\u0439 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 import socket import concurrent.futures import threading stop_event = threading.Event() def input_thread(conn: socket.socket): \"\"\"\u041f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\" while not stop_event.is_set(): msg = input() msg_encoded = msg.encode() conn.send(msg_encoded) if msg == 'Bye!': print('Stopped everything') stop_event.set() conn.close() def msg_printer_thread(conn: socket.socket): \"\"\"\u041f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\" while not stop_event.is_set(): msg = conn.recv(13000) print(msg.decode('utf-8')) def main(): conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.connect(('127.0.0.1', 14900)) with concurrent.futures.ThreadPoolExecutor() as executor: executor.submit(input_thread, conn) executor.submit(msg_printer_thread, conn) if __name__ == '__main__': main() \u0421\u0435\u0440\u0432\u0435\u0440\u0430 \u0421\u0435\u0440\u0432\u0435\u0440 \u0438\u043c\u0435\u0435\u0442 3 \u043f\u043e\u0442\u043e\u043a\u0430: \u041f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u041f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u0439\u043d\u0438 \u043e\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f(\u0438\u0445 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e) \u041f\u043e\u0442\u043e\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u0430 \u043e\u0431\u0449\u0430\u044f\u044e\u0442\u0441\u044f \u0434\u0440\u0443\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u043c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 msg_queue import socket from queue import Queue from concurrent import futures import threading from dataclasses import dataclass from typing import Dict @dataclass(frozen=True) class Client(): \"\"\" \u041e\u0431\u044a\u0435\u043a\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \"\"\" conn: socket.socket stop_event: threading.Event \"\"\"\u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u043e\u0441\u0442\u043e\u043d\u043e\u0432\u043a\u0438 \u043f\u043e\u0442\u043e\u043a\u0430\"\"\" id_client_dict: Dict[int, Client] = {} # \u041e\u0447\u0435\u0440\u0435\u043b\u044c \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438, \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0442 client_thread \u0438 sender_thread msg_queue = Queue() def main_thread(): \"\"\"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435\"\"\" conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind(('127.0.0.1', 14900)) conn.listen(10) new_client_id = 0 with futures.ThreadPoolExecutor() as executor: # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 executor.submit(sender_thread) while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client_conn, address = conn.accept() client_conn.send(f'Server: you have received id {new_client_id}'.encode('utf-8')) # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client = Client(client_conn, threading.Event()) # \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c id_client_dict[new_client_id] = client # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 executor.submit(client_thread, client, new_client_id) new_client_id += 1 def client_thread(client: Client, _id): \"\"\"\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0449\u0438\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\"\"\" while not client.stop_event.is_set(): client_msg = client.conn.recv(15000).decode('utf-8') msg_queue.put((client_msg, _id)) def sender_thread(): \"\"\"\u0420\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438\"\"\" while True: msg, sender_id = msg_queue.get() for _id, client in id_client_dict.items(): if sender_id != _id: client.conn.send(f'{sender_id}:{msg}'.encode()) # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0445\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0447\u0430\u0442\u0430 if msg == 'Bye!': sender_client = id_client_dict[sender_id] sender_client.stop_event.set() del id_client_dict[sender_id] if __name__ == '__main__': main_thread()","title":"\u0423\u043f\u0440\u0430\u0436\u0435\u043d\u0435\u043d\u0438\u0435 4"},{"location":"lab1/ex4/#4","text":"","title":"\u0423\u043f\u0440\u0430\u0436\u0435\u043d\u0435\u043d\u0438\u0435 4"},{"location":"lab1/ex4/#_1","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"lab1/ex4/#_2","text":"\u041a\u043b\u0438\u0435\u043d\u0442 \u0438\u043c\u0435\u0435\u0442 2 \u043f\u043e\u0442\u043e\u043a\u0430. \u041e\u0434\u0438\u043d \u0434\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u0414\u0440\u0443\u0433\u043e\u0439 \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 import socket import concurrent.futures import threading stop_event = threading.Event() def input_thread(conn: socket.socket): \"\"\"\u041f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\" while not stop_event.is_set(): msg = input() msg_encoded = msg.encode() conn.send(msg_encoded) if msg == 'Bye!': print('Stopped everything') stop_event.set() conn.close() def msg_printer_thread(conn: socket.socket): \"\"\"\u041f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\" while not stop_event.is_set(): msg = conn.recv(13000) print(msg.decode('utf-8')) def main(): conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.connect(('127.0.0.1', 14900)) with concurrent.futures.ThreadPoolExecutor() as executor: executor.submit(input_thread, conn) executor.submit(msg_printer_thread, conn) if __name__ == '__main__': main()","title":"\u041a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"lab1/ex4/#_3","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u0438\u043c\u0435\u0435\u0442 3 \u043f\u043e\u0442\u043e\u043a\u0430: \u041f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u041f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u0439\u043d\u0438 \u043e\u0442 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f(\u0438\u0445 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e) \u041f\u043e\u0442\u043e\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u0430 \u043e\u0431\u0449\u0430\u044f\u044e\u0442\u0441\u044f \u0434\u0440\u0443\u0433 \u0441 \u0434\u0440\u0443\u0433\u043e\u043c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 msg_queue import socket from queue import Queue from concurrent import futures import threading from dataclasses import dataclass from typing import Dict @dataclass(frozen=True) class Client(): \"\"\" \u041e\u0431\u044a\u0435\u043a\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \"\"\" conn: socket.socket stop_event: threading.Event \"\"\"\u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u043e\u0441\u0442\u043e\u043d\u043e\u0432\u043a\u0438 \u043f\u043e\u0442\u043e\u043a\u0430\"\"\" id_client_dict: Dict[int, Client] = {} # \u041e\u0447\u0435\u0440\u0435\u043b\u044c \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438, \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0442 client_thread \u0438 sender_thread msg_queue = Queue() def main_thread(): \"\"\"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043f\u043e\u0442\u043e\u043a, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435\"\"\" conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind(('127.0.0.1', 14900)) conn.listen(10) new_client_id = 0 with futures.ThreadPoolExecutor() as executor: # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 executor.submit(sender_thread) while True: # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client_conn, address = conn.accept() client_conn.send(f'Server: you have received id {new_client_id}'.encode('utf-8')) # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 client = Client(client_conn, threading.Event()) # \u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c id_client_dict[new_client_id] = client # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 executor.submit(client_thread, client, new_client_id) new_client_id += 1 def client_thread(client: Client, _id): \"\"\"\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u043f\u043e\u0441\u0442\u0443\u043f\u0430\u044e\u0449\u0438\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\"\"\" while not client.stop_event.is_set(): client_msg = client.conn.recv(15000).decode('utf-8') msg_queue.put((client_msg, _id)) def sender_thread(): \"\"\"\u0420\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0438\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u0438\"\"\" while True: msg, sender_id = msg_queue.get() for _id, client in id_client_dict.items(): if sender_id != _id: client.conn.send(f'{sender_id}:{msg}'.encode()) # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u044b\u0445\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0447\u0430\u0442\u0430 if msg == 'Bye!': sender_client = id_client_dict[sender_id] sender_client.stop_event.set() del id_client_dict[sender_id] if __name__ == '__main__': main_thread()","title":"\u0421\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"lab1/ex5/","text":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 5 \u041a\u043e\u0434 \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 import socket import logging from io import BufferedWriter, BufferedReader import email.parser import email.message from urllib.parse import parse_qs, urlparse from dataclasses import dataclass from typing import List, Tuple, Dict class Request: \"\"\" Class containing request data \"\"\" def __init__(self, method, target, version, headers, rfile): self.method = method # get, post ... self.target = target # url self.version = version self.headers = headers # self.rfile = rfile @property def url_path(self): return self.url.path @property def url_params(self): return parse_qs(self.url.query) @property def url(self): return urlparse(self.target) @property def body(self): size = self.headers.get('Content-Length') if not size: return None else: size = int(size) return self.rfile.read(size) class ConnWriter: \"\"\" Wrapper around file interface of socket \"\"\" encoding = 'iso-8859-1' def __init__(self, wfile: BufferedWriter): self._wfile = wfile def encode_and_write(self, s: str): if not s.endswith('\\r\\n'): s += '\\r\\n' encoded = s.encode(self.encoding) self._wfile.write(encoded) def write_empty_line(self): self._wfile.write(b'\\r\\n') def write_bytes(self, s: bytes): if not s.endswith(b'\\r\\n'): s += b'\\r\\n' self._wfile.write(s) def __enter__(self): return self def __exit__(self, exc_type, exc_val, exc_tb): self._wfile.flush() self._wfile.close() @dataclass(frozen=True) class Response: \"\"\" Dataclass from which response created \"\"\" status: int reason: str headers: List[Tuple] = None body: bytes = None class MyHTTPServer: \"\"\" Accept requests, generate responses \"\"\" def __init__(self, host, port, server_name): self._host = host self._port = port self._server_name = server_name self.marks: Dict[str, List[int]] = {\"Math\": [5], 'Programming': [4]} \"\"\"Dict to imitate database. Already packed with some values\"\"\" def serve_forever(self): \"\"\" Starts server. Main function of a class \"\"\" conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM, proto=0) try: conn.bind((self._host, self._port)) conn.listen(10) while True: client_conn, client_address = conn.accept() self.serve_client(client_conn) finally: conn.close() def serve_client(self, client_conn): \"\"\" Get response from a client and send appropriate response \"\"\" request = self.parse_request(client_conn) response = self.handle_request(request) self.send_response(client_conn, response) def parse_request(self, conn): \"\"\" Convert request into Request instance \"\"\" rfile = conn.makefile('rb') method, target, version = self.parse_request_line(rfile) logging.debug(f'request_line: {method} {target} {version}') headers = self.parse_headers(rfile) logging.debug(f'headers:\\n{headers}') self.check_host(headers) return Request(method, target, version, headers, rfile) def parse_request_line(self, rfile): request_line = rfile.readline().decode('iso-8859-1') request_line = request_line.rstrip('\\r\\n') method, target, version = request_line.split() if version != 'HTTP/1.1': raise Exception('Invalid HTTP version') return method, target, version def parse_headers(self, rfile: BufferedReader) -> email.message.Message: headers_list = [] while True: line = rfile.readline() if line in (b'\\r\\n', b'\\n', b''): break headers_list.append(line) headers_str = b''.join(headers_list).decode('iso-8859-1') return email.parser.Parser().parsestr(headers_str) def check_host(self, headers): \"\"\"Is host correct?\"\"\" host = headers.get('Host', '') logging.debug(f'host: {host}') if not host: raise Exception('Request without host') if host not in (self._server_name, f'{self._host}:{self._port}'): raise Exception('Invalid host') def handle_request(self, request:Request) -> Response: \"\"\"Handle different types of request. Even if this request is not supported\"\"\" if request.method == 'GET' and request.url_path == '/': return self.handle_get_mark(request) if request.method == 'POST' and request.url_path =='/update_marks': return self.handle_post_update_marks(request) if request.method == 'GET' and request.url_path == \"/update_marks\": return self.handle_get_update_marks(request) if request.method == 'GET' and request.url_path == '/favicon.ico': return Response(200, 'OK') return self.handle_404(request) def handle_post_update_marks(self, request: Request): body_encoded = request.body body_decoded = body_encoded.decode('iso-8859-1') parameters = parse_qs(body_decoded) if 'mark' not in parameters: raise Exception('No mark in post') if 'subject' not in parameters: raise Exception('No subject in post') mark = parameters['mark'][0] if not mark.isnumeric(): raise Exception('Invalid mark') mark = int(mark) subject = parameters['subject'][0] if subject not in self.marks: self.marks[subject] = [] self.marks[subject].append(mark) return Response(204, 'Created') def handle_get_mark(self, request: Request): content_type = 'text/html; charset=utf-8' body = '<html><head>' body += \"\"\"<style> table { border-collapse: collapse; } th, td { border: 1px solid black; text-align: center; padding: 8px; } </style>\"\"\" body += '</head><body>' body += '<table>' for subject in self.marks: body += '<tr>' body += f'<td>{subject}</td>' for mark in self.marks[subject]: body += f'<td>{mark}</td>' body += '</tr>' body += '</table>' body += '</body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_404(self, request: Request): body = '<html><head></head><body><h1>404 not found</h1></body>' body = body.encode('utf-8') content_type = 'text/html; charset=utf-8' headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(404, 'Not Found', headers, body) def handle_get_update_marks(self, request): with open('update_marks.html') as f: body = ''.join(f.readlines()) body = body.encode('utf-8') headers = [('Content-Type', 'text/html; charset=utf-8'), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def send_response(self, conn: socket.socket, resp: Response): \"\"\"Convert Response class instance into appropriate test and sends it via socket\"\"\" with ConnWriter(conn.makefile('wb')) as wfile_wrapped: status_line = f'HTTP/1.1 {resp.status} {resp.reason}' wfile_wrapped.encode_and_write(status_line) if resp.headers is not None: for key, value in resp.headers: header_line = f'{key}: {value}' wfile_wrapped.encode_and_write(header_line) wfile_wrapped.write_empty_line() if resp.body is not None: wfile_wrapped.write_bytes(resp.body) if __name__ == '__main__': format = \"%(asctime)s: %(message)s\" logging.basicConfig(format=format, level=logging.INFO, datefmt=\"%H:%M:%S\") host = '127.0.0.1' port = 14900 print('\u0421\u0441\u044b\u043b\u043a\u0438:\\n' '\u041e\u0446\u0435\u043d\u043a\u0438: 127.0.0.1:14900\\n' '\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a: 127.0.0.1:14900/update_marks\\n') name = 'example.local' server = MyHTTPServer(host, port, name) server.serve_forever() \u041a\u043e\u0434 update_marks.html ```html Update marks Input mark Input subject","title":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 5"},{"location":"lab1/ex5/#5","text":"","title":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 5"},{"location":"lab1/ex5/#_1","text":"","title":"\u041a\u043e\u0434"},{"location":"lab1/ex5/#_2","text":"import socket import logging from io import BufferedWriter, BufferedReader import email.parser import email.message from urllib.parse import parse_qs, urlparse from dataclasses import dataclass from typing import List, Tuple, Dict class Request: \"\"\" Class containing request data \"\"\" def __init__(self, method, target, version, headers, rfile): self.method = method # get, post ... self.target = target # url self.version = version self.headers = headers # self.rfile = rfile @property def url_path(self): return self.url.path @property def url_params(self): return parse_qs(self.url.query) @property def url(self): return urlparse(self.target) @property def body(self): size = self.headers.get('Content-Length') if not size: return None else: size = int(size) return self.rfile.read(size) class ConnWriter: \"\"\" Wrapper around file interface of socket \"\"\" encoding = 'iso-8859-1' def __init__(self, wfile: BufferedWriter): self._wfile = wfile def encode_and_write(self, s: str): if not s.endswith('\\r\\n'): s += '\\r\\n' encoded = s.encode(self.encoding) self._wfile.write(encoded) def write_empty_line(self): self._wfile.write(b'\\r\\n') def write_bytes(self, s: bytes): if not s.endswith(b'\\r\\n'): s += b'\\r\\n' self._wfile.write(s) def __enter__(self): return self def __exit__(self, exc_type, exc_val, exc_tb): self._wfile.flush() self._wfile.close() @dataclass(frozen=True) class Response: \"\"\" Dataclass from which response created \"\"\" status: int reason: str headers: List[Tuple] = None body: bytes = None class MyHTTPServer: \"\"\" Accept requests, generate responses \"\"\" def __init__(self, host, port, server_name): self._host = host self._port = port self._server_name = server_name self.marks: Dict[str, List[int]] = {\"Math\": [5], 'Programming': [4]} \"\"\"Dict to imitate database. Already packed with some values\"\"\" def serve_forever(self): \"\"\" Starts server. Main function of a class \"\"\" conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM, proto=0) try: conn.bind((self._host, self._port)) conn.listen(10) while True: client_conn, client_address = conn.accept() self.serve_client(client_conn) finally: conn.close() def serve_client(self, client_conn): \"\"\" Get response from a client and send appropriate response \"\"\" request = self.parse_request(client_conn) response = self.handle_request(request) self.send_response(client_conn, response) def parse_request(self, conn): \"\"\" Convert request into Request instance \"\"\" rfile = conn.makefile('rb') method, target, version = self.parse_request_line(rfile) logging.debug(f'request_line: {method} {target} {version}') headers = self.parse_headers(rfile) logging.debug(f'headers:\\n{headers}') self.check_host(headers) return Request(method, target, version, headers, rfile) def parse_request_line(self, rfile): request_line = rfile.readline().decode('iso-8859-1') request_line = request_line.rstrip('\\r\\n') method, target, version = request_line.split() if version != 'HTTP/1.1': raise Exception('Invalid HTTP version') return method, target, version def parse_headers(self, rfile: BufferedReader) -> email.message.Message: headers_list = [] while True: line = rfile.readline() if line in (b'\\r\\n', b'\\n', b''): break headers_list.append(line) headers_str = b''.join(headers_list).decode('iso-8859-1') return email.parser.Parser().parsestr(headers_str) def check_host(self, headers): \"\"\"Is host correct?\"\"\" host = headers.get('Host', '') logging.debug(f'host: {host}') if not host: raise Exception('Request without host') if host not in (self._server_name, f'{self._host}:{self._port}'): raise Exception('Invalid host') def handle_request(self, request:Request) -> Response: \"\"\"Handle different types of request. Even if this request is not supported\"\"\" if request.method == 'GET' and request.url_path == '/': return self.handle_get_mark(request) if request.method == 'POST' and request.url_path =='/update_marks': return self.handle_post_update_marks(request) if request.method == 'GET' and request.url_path == \"/update_marks\": return self.handle_get_update_marks(request) if request.method == 'GET' and request.url_path == '/favicon.ico': return Response(200, 'OK') return self.handle_404(request) def handle_post_update_marks(self, request: Request): body_encoded = request.body body_decoded = body_encoded.decode('iso-8859-1') parameters = parse_qs(body_decoded) if 'mark' not in parameters: raise Exception('No mark in post') if 'subject' not in parameters: raise Exception('No subject in post') mark = parameters['mark'][0] if not mark.isnumeric(): raise Exception('Invalid mark') mark = int(mark) subject = parameters['subject'][0] if subject not in self.marks: self.marks[subject] = [] self.marks[subject].append(mark) return Response(204, 'Created') def handle_get_mark(self, request: Request): content_type = 'text/html; charset=utf-8' body = '<html><head>' body += \"\"\"<style> table { border-collapse: collapse; } th, td { border: 1px solid black; text-align: center; padding: 8px; } </style>\"\"\" body += '</head><body>' body += '<table>' for subject in self.marks: body += '<tr>' body += f'<td>{subject}</td>' for mark in self.marks[subject]: body += f'<td>{mark}</td>' body += '</tr>' body += '</table>' body += '</body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_404(self, request: Request): body = '<html><head></head><body><h1>404 not found</h1></body>' body = body.encode('utf-8') content_type = 'text/html; charset=utf-8' headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(404, 'Not Found', headers, body) def handle_get_update_marks(self, request): with open('update_marks.html') as f: body = ''.join(f.readlines()) body = body.encode('utf-8') headers = [('Content-Type', 'text/html; charset=utf-8'), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def send_response(self, conn: socket.socket, resp: Response): \"\"\"Convert Response class instance into appropriate test and sends it via socket\"\"\" with ConnWriter(conn.makefile('wb')) as wfile_wrapped: status_line = f'HTTP/1.1 {resp.status} {resp.reason}' wfile_wrapped.encode_and_write(status_line) if resp.headers is not None: for key, value in resp.headers: header_line = f'{key}: {value}' wfile_wrapped.encode_and_write(header_line) wfile_wrapped.write_empty_line() if resp.body is not None: wfile_wrapped.write_bytes(resp.body) if __name__ == '__main__': format = \"%(asctime)s: %(message)s\" logging.basicConfig(format=format, level=logging.INFO, datefmt=\"%H:%M:%S\") host = '127.0.0.1' port = 14900 print('\u0421\u0441\u044b\u043b\u043a\u0438:\\n' '\u041e\u0446\u0435\u043d\u043a\u0438: 127.0.0.1:14900\\n' '\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a: 127.0.0.1:14900/update_marks\\n') name = 'example.local' server = MyHTTPServer(host, port, name) server.serve_forever()","title":"\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"lab1/ex5/#update_markshtml","text":"```html Update marks Input mark Input subject","title":"\u041a\u043e\u0434 update_marks.html"},{"location":"lab2/forms/","text":"forms from django import forms from django.contrib.auth import get_user_model from django.contrib.auth.forms import UserCreationForm from django.forms import ModelForm from django.forms import widgets from homework import models user = get_user_model() class UserRegisterForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = user fields = ['username', 'first_name', 'last_name', 'email', 'password1', 'password2'] class UserLoginForm(forms.Form): username = forms.CharField(required=True) password = forms.CharField(required=True, widget=forms.PasswordInput)","title":"forms"},{"location":"lab2/forms/#forms","text":"from django import forms from django.contrib.auth import get_user_model from django.contrib.auth.forms import UserCreationForm from django.forms import ModelForm from django.forms import widgets from homework import models user = get_user_model() class UserRegisterForm(UserCreationForm): class Meta(UserCreationForm.Meta): model = user fields = ['username', 'first_name', 'last_name', 'email', 'password1', 'password2'] class UserLoginForm(forms.Form): username = forms.CharField(required=True) password = forms.CharField(required=True, widget=forms.PasswordInput)","title":"forms"},{"location":"lab2/models/","text":"models \u0421\u0445\u0435\u043c\u0430 \u0411\u0414 Student \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0449\u0435\u0435 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 class Student(AbstractUser): homeworks = models.ManyToManyField('Homework', related_name='students') def __str__(self): return self.username Subject \u041f\u0440\u0435\u0434\u043c\u0435\u0442 class Subject(models.Model): title = models.CharField(max_length=100, blank=False) def __str__(self): return self.title Homework \u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 class Homework(models.Model): subject = models.ForeignKey( 'Subject', related_name='homeworks', on_delete=models.RESTRICT ) start_date = models.DateField() end_date = models.DateField() max_points = models.IntegerField(validators=[validators.MinValueValidator(0, message='less than 0')]) fine_points = models.IntegerField(validators=[validators.MinValueValidator(0, message='less than 0')]) description = models.TextField() def __str__(self): return f'\u041f\u0440\u0435\u0434\u043c\u0435\u0442: {self.subject} \u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438: {self.start_date}' StudentHomework \u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435, \u0432\u044b\u0434\u0430\u043d\u043d\u043e\u0435 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0443 class StudentHomework(models.Model): student = models.ForeignKey('Student', on_delete=models.RESTRICT, related_name='assigned_homeworks') homework = models.ForeignKey('Homework', on_delete=models.RESTRICT, related_name='assigned_homeworks') answer = models.TextField(blank=True, null=True) mark = models.IntegerField(blank=True, null=True) def __str__(self): return f'{self.student}: {self.homework}' def get_submit_url(self): return reverse('homework:submit_homework', kwargs={'pk': self.pk})","title":"models"},{"location":"lab2/models/#models","text":"","title":"models"},{"location":"lab2/models/#_1","text":"","title":"\u0421\u0445\u0435\u043c\u0430 \u0411\u0414"},{"location":"lab2/models/#student","text":"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0449\u0435\u0435 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 class Student(AbstractUser): homeworks = models.ManyToManyField('Homework', related_name='students') def __str__(self): return self.username","title":"Student"},{"location":"lab2/models/#subject","text":"\u041f\u0440\u0435\u0434\u043c\u0435\u0442 class Subject(models.Model): title = models.CharField(max_length=100, blank=False) def __str__(self): return self.title","title":"Subject"},{"location":"lab2/models/#homework","text":"\u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 class Homework(models.Model): subject = models.ForeignKey( 'Subject', related_name='homeworks', on_delete=models.RESTRICT ) start_date = models.DateField() end_date = models.DateField() max_points = models.IntegerField(validators=[validators.MinValueValidator(0, message='less than 0')]) fine_points = models.IntegerField(validators=[validators.MinValueValidator(0, message='less than 0')]) description = models.TextField() def __str__(self): return f'\u041f\u0440\u0435\u0434\u043c\u0435\u0442: {self.subject} \u0414\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438: {self.start_date}'","title":"Homework"},{"location":"lab2/models/#studenthomework","text":"\u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435, \u0432\u044b\u0434\u0430\u043d\u043d\u043e\u0435 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0443 class StudentHomework(models.Model): student = models.ForeignKey('Student', on_delete=models.RESTRICT, related_name='assigned_homeworks') homework = models.ForeignKey('Homework', on_delete=models.RESTRICT, related_name='assigned_homeworks') answer = models.TextField(blank=True, null=True) mark = models.IntegerField(blank=True, null=True) def __str__(self): return f'{self.student}: {self.homework}' def get_submit_url(self): return reverse('homework:submit_homework', kwargs={'pk': self.pk})","title":"StudentHomework"},{"location":"lab2/practice/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0437\u0434\u0435\u0441\u044c","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 "},{"location":"lab2/practice/#_1","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0437\u0434\u0435\u0441\u044c"},{"location":"lab2/urls/","text":"urls homework/ \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f homework/login \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f(\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430) homework/logout \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0443\u0447.\u0437\u0430\u043f\u0438\u0441\u0438 homework/registration \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f homework/homeworks \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u043c\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u043c\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f(\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430) homework/submit_homework/ \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435. \u041d\u0430 \u043d\u0435\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u043c \u0441 /homeworks homework/grades \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u043e\u0446\u0435\u043d\u0430\u043a\u0430\u043c\u0438 \u0432\u0441\u0435\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c","title":"urls"},{"location":"lab2/urls/#urls","text":"","title":"urls"},{"location":"lab2/urls/#homework","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","title":"homework/"},{"location":"lab2/urls/#homeworklogin","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u0432\u0445\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f(\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430)","title":"homework/login"},{"location":"lab2/urls/#homeworklogout","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u0432\u044b\u0445\u043e\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0443\u0447.\u0437\u0430\u043f\u0438\u0441\u0438","title":"homework/logout"},{"location":"lab2/urls/#homeworkregistration","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","title":"homework/registration"},{"location":"lab2/urls/#homeworkhomeworks","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u043c\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f\u043c\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f(\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430)","title":"homework/homeworks"},{"location":"lab2/urls/#homeworksubmit_homework","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435. \u041d\u0430 \u043d\u0435\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u043c \u0441 /homeworks","title":"homework/submit_homework/"},{"location":"lab2/urls/#homeworkgrades","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u043e\u0446\u0435\u043d\u0430\u043a\u0430\u043c\u0438 \u0432\u0441\u0435\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c","title":"homework/grades"},{"location":"lab2/views/","text":"views from django.shortcuts import render, redirect # Create your views here. from django.views import View from django.views.generic import DetailView, UpdateView, DeleteView, ListView from django.contrib import messages from django.contrib.auth import logout, login, authenticate from django.contrib.auth.mixins import LoginRequiredMixin from django.urls import reverse, reverse_lazy from itertools import groupby from collections import OrderedDict, defaultdict from django.db.models import QuerySet, F from django.conf import settings from homework import forms, models class RootPageView(View): def get(self, request): if request.user.is_authenticated: return render(request, 'homework/root_page.html', {'name': request.user.username}) return render(request, 'homework/root_page.html') class LoginView(View): def get(self, request): form = forms.UserLoginForm() return render(request, 'homework/login.html', {'form': form}) def post(self, request): form = forms.UserLoginForm(request.POST) if form.is_valid(): username = form.cleaned_data['username'] password = form.cleaned_data['password'] user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect(reverse('homework:root')) else: messages.error(request, '\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043b\u043e\u0433\u0438\u043d \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c') return render(request, 'homework/login.html', {'form': form}) class LogOutView(View): def get(self, request): logout(request) return redirect(reverse('homework:root')) class RegistrationView(View): def get(self, request, *args, **kwargs): form = forms.UserRegisterForm() context = {'form': form} return render(request, 'homework/registration.html', context) def post(self, request, *args, **kwargs): form = forms.UserRegisterForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect(settings.LOGIN_REDIRECT_URL) context = {'form': form} return render(request, 'homework/registration.html', context) class HomeworksView(LoginRequiredMixin, ListView): model = models.Homework template_name = 'homework/homeworks.html' def get_queryset(self): user = self.request.user assigned_homeworks_qs = user.assigned_homeworks.get_queryset() return assigned_homeworks_qs class SubmitHomeworkView(LoginRequiredMixin, UpdateView): model = models.StudentHomework fields = ['answer'] success_url = reverse_lazy('homework:homeworks') class GradesView(View): def get(self, request): # get subjects and usernames and sort them subjects = list(models.Subject.objects.all().values_list('title', flat=True)) subjects.sort() usernames = list(models.Student.objects.all().values_list('username', flat=True)) usernames.sort() # prepare ordered dict to be filled with marks subject_username_grades = OrderedDict() for subject in subjects: subject_username_grades[subject] = {} for username in usernames: subject_username_grades[subject][username] = [] # filter queryset homeworks = models.StudentHomework.objects.filter(mark__isnull=False) # annotate queryset with subject_title and username annotated_homeworks = homeworks.annotate( subject_title=F('homework__subject__title'), username=F('student__username') ).values( 'subject_title', 'username', 'mark' ) # Populate add marks to OrderedDict for hw in annotated_homeworks: subject = hw['subject_title'] username = hw['username'] mark = hw['mark'] subject_username_grades[subject][username].append(mark) return render(request, 'homework/marks.html', {'subject_username_grades': subject_username_grades})","title":"views"},{"location":"lab2/views/#views","text":"from django.shortcuts import render, redirect # Create your views here. from django.views import View from django.views.generic import DetailView, UpdateView, DeleteView, ListView from django.contrib import messages from django.contrib.auth import logout, login, authenticate from django.contrib.auth.mixins import LoginRequiredMixin from django.urls import reverse, reverse_lazy from itertools import groupby from collections import OrderedDict, defaultdict from django.db.models import QuerySet, F from django.conf import settings from homework import forms, models class RootPageView(View): def get(self, request): if request.user.is_authenticated: return render(request, 'homework/root_page.html', {'name': request.user.username}) return render(request, 'homework/root_page.html') class LoginView(View): def get(self, request): form = forms.UserLoginForm() return render(request, 'homework/login.html', {'form': form}) def post(self, request): form = forms.UserLoginForm(request.POST) if form.is_valid(): username = form.cleaned_data['username'] password = form.cleaned_data['password'] user = authenticate(request, username=username, password=password) if user is not None: login(request, user) return redirect(reverse('homework:root')) else: messages.error(request, '\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043b\u043e\u0433\u0438\u043d \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c') return render(request, 'homework/login.html', {'form': form}) class LogOutView(View): def get(self, request): logout(request) return redirect(reverse('homework:root')) class RegistrationView(View): def get(self, request, *args, **kwargs): form = forms.UserRegisterForm() context = {'form': form} return render(request, 'homework/registration.html', context) def post(self, request, *args, **kwargs): form = forms.UserRegisterForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect(settings.LOGIN_REDIRECT_URL) context = {'form': form} return render(request, 'homework/registration.html', context) class HomeworksView(LoginRequiredMixin, ListView): model = models.Homework template_name = 'homework/homeworks.html' def get_queryset(self): user = self.request.user assigned_homeworks_qs = user.assigned_homeworks.get_queryset() return assigned_homeworks_qs class SubmitHomeworkView(LoginRequiredMixin, UpdateView): model = models.StudentHomework fields = ['answer'] success_url = reverse_lazy('homework:homeworks') class GradesView(View): def get(self, request): # get subjects and usernames and sort them subjects = list(models.Subject.objects.all().values_list('title', flat=True)) subjects.sort() usernames = list(models.Student.objects.all().values_list('username', flat=True)) usernames.sort() # prepare ordered dict to be filled with marks subject_username_grades = OrderedDict() for subject in subjects: subject_username_grades[subject] = {} for username in usernames: subject_username_grades[subject][username] = [] # filter queryset homeworks = models.StudentHomework.objects.filter(mark__isnull=False) # annotate queryset with subject_title and username annotated_homeworks = homeworks.annotate( subject_title=F('homework__subject__title'), username=F('student__username') ).values( 'subject_title', 'username', 'mark' ) # Populate add marks to OrderedDict for hw in annotated_homeworks: subject = hw['subject_title'] username = hw['username'] mark = hw['mark'] subject_username_grades[subject][username].append(mark) return render(request, 'homework/marks.html', {'subject_username_grades': subject_username_grades})","title":"views"},{"location":"lab3/api_description/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 API /lab3 lab3/reader lab3/reader/books/\\<int:reader_pk> \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043d\u0438\u0433\u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f lab3/reader/outdated \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0441\u0435\u0445 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439, \u0441 \u043f\u0440\u043e\u0441\u0440\u043e\u0446\u0435\u043d\u043d\u044b\u043c\u0438 \u043a\u043d\u0438\u0433\u0430\u043c\u0438 lab3/reader/rare_books \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0441\u0435\u0445 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043a\u043d\u0438\u0433\u0430, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u0435\u043d\u044c\u0448\u0435 2-\u0445 lab3/reader/books/book_month_ago \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0441\u0435\u0445 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0437\u044f\u043b\u0438 \u043a\u043d\u0438\u0433\u0443 \u0431\u043e\u043b\u0435\u0435 \u043c\u0435\u0441\u044f\u0446\u0430 \u043d\u0430\u0437\u0430\u0434 lab3/reader/list \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 lab3/reader/create \\ \u041c\u0435\u0442\u043e\u0434\u044b: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\\ \u0414\u0430\u043d\u043d\u044b\u0435: \u0412\u0441\u0435 \u043f\u043e\u043b\u044f \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f { \"reader_number\": <str>, \"registration_date\": <str> in format of yyyy-mm-dd, \"active\": <bool>, \"first_name\": <str>, \"last_name\": <str>, \"passport_number\": <str>, \"birth_date\": <str> in format of yyyy-mm-dd, \"address\": <str>, \"mobile_number\": <str> } { \"reader_number\": \"211232\", \"registration_date\": \"2024-03-07\", \"active\": true, \"first_name\": \"Anton\", \"last_name\": \"Votykov\", \"passport_number\": \"2348172389\", \"birth_date\": \"2010-01-08\", \"address\": \"SPB, krasilnikov, 10\", \"mobile_number\": \"+78005553535\" } lab3/reader/add_book \\ \u041c\u0435\u0442\u043e\u0434\u044b: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044e\\ \u0414\u0430\u043d\u043d\u044b\u0435: { \"start_date\": <date>, \"end_date\": <date> nullabble, \"book_instance\": <int> pk of book instance, \"reader\": <int> pk of reader } lab3/statistics lab3/statistics/education \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u0442\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043f\u043e \u0443\u0440\u043e\u0432\u043d\u044e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f lab3/statistics/age \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 lab3/statistics/room/\\<int:pk> \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0437\u0430\u043b\u0430\\ GET-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: * date_after - \u0434\u0430\u0442\u0430, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 * date_before - \u0434\u0430\u0442\u0430, \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0438\u0434\u0435\u0442 \u0438\u0434\u0435\u0442 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\\ \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430: \\ /lab3/statistics/room/1?date_after=2023-01-01&date_before=2024-01-01 lab3/statistics/room/list \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043e\u0431\u043e\u0438\u0445 \u0437\u0430\u043b\u043e\u0432 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 GET-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: * date_after - \u0434\u0430\u0442\u0430, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 * date_before - \u0434\u0430\u0442\u0430, \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0438\u0434\u0435\u0442 \u0438\u0434\u0435\u0442 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\\ \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430: \\ /lab3/statistics/room/list?date_after=2023-01-01&date_before=2024-01-01 lab3/statistics/library \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 GET-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: * date_after - \u0434\u0430\u0442\u0430, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 * date_before - \u0434\u0430\u0442\u0430, \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0438\u0434\u0435\u0442 \u0438\u0434\u0435\u0442 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\\ \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430: \\ /lab3/statistics/library?date_after=2023-01-01&date_before=2024-01-01 lab3/book_instance lab3/book_instance/list \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043d\u0438\u0433 lab3/book_instance/\\<int:pk> \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043d\u0438\u0433\u0438 lab3/book_instance/remove/\\<int:pk> \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043d\u0438\u0433\u0438 lab3/book_instance/update/\\<int:pk> \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043d\u0438\u0433\u0438 \u0414\u0430\u043d\u043d\u044b\u0435: { \"code\": <string>, \"quality\": <enum ['b', 'g', 'n']>, \"book\": <int> pk of book, } lab3/book_instance/create \\ \u041c\u0435\u0442\u043e\u0434\u044b: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043d\u0438\u0433\u0438\\ \u0414\u0430\u043d\u043d\u044b\u0435: \u043f\u043e\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 book_instance { \"code\": <string>, \"quality\": <enum ['b', 'g', 'n']>, \"book\": <int> pk of book, \"room\": <int> pk of room } lab3/book lab3/book/create \\ \u041c\u0435\u0442\u043e\u0434\u044b: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043d\u0438\u0433\u0438 \u0414\u0430\u043d\u043d\u044b\u0435: \u043f\u043e\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 book { \"authors\": <list[int]> list of author's pks, \"title\": <string>, \"year\": <int>, \"section\": <int> pk of section, \"publisher\": <int> pk of publisher } /auth \u041a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f? \u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 /auth/token/login/ \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u043e\u043a\u0435\u043d, \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0442\u043e\u043a\u0435\u043d \u0432 headers \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0437\u043e\u043c Authorization: token <\u0432\u0430\u0448 \u0442\u043e\u043a\u0435\u043d> \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 /auth/users/ \\ \u041c\u0435\u0442\u043e\u0434: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445 \u041c\u0435\u0442\u043e\u0434: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\\ \u0414\u0430\u043d\u043d\u044b\u0435: { 'password': ... 'username':..., // \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f } /auth/users/me/ \\ \u041c\u0435\u0442\u043e\u0434: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u041c\u0435\u0442\u043e\u0434: PUT\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\\ \u0414\u0430\u043d\u043d\u044b\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432\u0441\u0435 \u043f\u043e\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u041c\u0435\u0442\u043e\u0434: PATCH\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\\ \u0414\u0430\u043d\u043d\u044b\u0435: \u043f\u043e\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u043e\u0442\u0438\u043c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c /auth/token/login \\ \u041c\u0435\u0442\u043e\u0434: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\\ \u0414\u0430\u043d\u043d\u044b\u0435: { 'username': ..., 'password': ... } /auth/token/logout \\ \u041c\u0435\u0442\u043e\u0434: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0442\u043e\u043a\u0435\u043d","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 API"},{"location":"lab3/api_description/#api","text":"","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 API"},{"location":"lab3/api_description/#lab3","text":"","title":"/lab3"},{"location":"lab3/api_description/#lab3reader","text":"lab3/reader/books/\\<int:reader_pk> \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0441\u0435 \u043a\u043d\u0438\u0433\u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f lab3/reader/outdated \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0441\u0435\u0445 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439, \u0441 \u043f\u0440\u043e\u0441\u0440\u043e\u0446\u0435\u043d\u043d\u044b\u043c\u0438 \u043a\u043d\u0438\u0433\u0430\u043c\u0438 lab3/reader/rare_books \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0441\u0435\u0445 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043a\u043d\u0438\u0433\u0430, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u0435\u043d\u044c\u0448\u0435 2-\u0445 lab3/reader/books/book_month_ago \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0441\u0435\u0445 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0437\u044f\u043b\u0438 \u043a\u043d\u0438\u0433\u0443 \u0431\u043e\u043b\u0435\u0435 \u043c\u0435\u0441\u044f\u0446\u0430 \u043d\u0430\u0437\u0430\u0434 lab3/reader/list \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 lab3/reader/create \\ \u041c\u0435\u0442\u043e\u0434\u044b: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\\ \u0414\u0430\u043d\u043d\u044b\u0435: \u0412\u0441\u0435 \u043f\u043e\u043b\u044f \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f { \"reader_number\": <str>, \"registration_date\": <str> in format of yyyy-mm-dd, \"active\": <bool>, \"first_name\": <str>, \"last_name\": <str>, \"passport_number\": <str>, \"birth_date\": <str> in format of yyyy-mm-dd, \"address\": <str>, \"mobile_number\": <str> } { \"reader_number\": \"211232\", \"registration_date\": \"2024-03-07\", \"active\": true, \"first_name\": \"Anton\", \"last_name\": \"Votykov\", \"passport_number\": \"2348172389\", \"birth_date\": \"2010-01-08\", \"address\": \"SPB, krasilnikov, 10\", \"mobile_number\": \"+78005553535\" } lab3/reader/add_book \\ \u041c\u0435\u0442\u043e\u0434\u044b: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u0430\u0442\u044c \u043a\u043d\u0438\u0433\u0443 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044e\\ \u0414\u0430\u043d\u043d\u044b\u0435: { \"start_date\": <date>, \"end_date\": <date> nullabble, \"book_instance\": <int> pk of book instance, \"reader\": <int> pk of reader }","title":"lab3/reader"},{"location":"lab3/api_description/#lab3statistics","text":"lab3/statistics/education \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u0442\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043f\u043e \u0443\u0440\u043e\u0432\u043d\u044e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f lab3/statistics/age \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 lab3/statistics/room/\\<int:pk> \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0437\u0430\u043b\u0430\\ GET-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: * date_after - \u0434\u0430\u0442\u0430, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 * date_before - \u0434\u0430\u0442\u0430, \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0438\u0434\u0435\u0442 \u0438\u0434\u0435\u0442 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\\ \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430: \\ /lab3/statistics/room/1?date_after=2023-01-01&date_before=2024-01-01 lab3/statistics/room/list \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043e\u0431\u043e\u0438\u0445 \u0437\u0430\u043b\u043e\u0432 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 GET-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: * date_after - \u0434\u0430\u0442\u0430, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 * date_before - \u0434\u0430\u0442\u0430, \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0438\u0434\u0435\u0442 \u0438\u0434\u0435\u0442 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\\ \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430: \\ /lab3/statistics/room/list?date_after=2023-01-01&date_before=2024-01-01 lab3/statistics/library \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 GET-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: * date_after - \u0434\u0430\u0442\u0430, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438 * date_before - \u0434\u0430\u0442\u0430, \u0434\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0438\u0434\u0435\u0442 \u0438\u0434\u0435\u0442 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\\ \u041f\u0440\u0438\u043c\u0435\u0440 \u0437\u0430\u043f\u0440\u043e\u0441\u0430: \\ /lab3/statistics/library?date_after=2023-01-01&date_before=2024-01-01","title":"lab3/statistics"},{"location":"lab3/api_description/#lab3book_instance","text":"lab3/book_instance/list \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u043e\u0432 \u043a\u043d\u0438\u0433 lab3/book_instance/\\<int:pk> \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043d\u0438\u0433\u0438 lab3/book_instance/remove/\\<int:pk> \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043d\u0438\u0433\u0438 lab3/book_instance/update/\\<int:pk> \\ \u041c\u0435\u0442\u043e\u0434\u044b: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043d\u0438\u0433\u0438 \u0414\u0430\u043d\u043d\u044b\u0435: { \"code\": <string>, \"quality\": <enum ['b', 'g', 'n']>, \"book\": <int> pk of book, } lab3/book_instance/create \\ \u041c\u0435\u0442\u043e\u0434\u044b: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043d\u0438\u0433\u0438\\ \u0414\u0430\u043d\u043d\u044b\u0435: \u043f\u043e\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 book_instance { \"code\": <string>, \"quality\": <enum ['b', 'g', 'n']>, \"book\": <int> pk of book, \"room\": <int> pk of room }","title":"lab3/book_instance"},{"location":"lab3/api_description/#lab3book","text":"lab3/book/create \\ \u041c\u0435\u0442\u043e\u0434\u044b: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043d\u0438\u0433\u0438 \u0414\u0430\u043d\u043d\u044b\u0435: \u043f\u043e\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 book { \"authors\": <list[int]> list of author's pks, \"title\": <string>, \"year\": <int>, \"section\": <int> pk of section, \"publisher\": <int> pk of publisher }","title":"lab3/book"},{"location":"lab3/api_description/#auth","text":"","title":"/auth"},{"location":"lab3/api_description/#_1","text":"\u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 /auth/token/login/ \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u043e\u043a\u0435\u043d, \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0442\u043e\u043a\u0435\u043d \u0432 headers \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0437\u043e\u043c Authorization: token <\u0432\u0430\u0448 \u0442\u043e\u043a\u0435\u043d>","title":"\u041a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f?"},{"location":"lab3/api_description/#_2","text":"/auth/users/ \\ \u041c\u0435\u0442\u043e\u0434: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445 \u041c\u0435\u0442\u043e\u0434: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\\ \u0414\u0430\u043d\u043d\u044b\u0435: { 'password': ... 'username':..., // \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f } /auth/users/me/ \\ \u041c\u0435\u0442\u043e\u0434: GET\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u041c\u0435\u0442\u043e\u0434: PUT\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\\ \u0414\u0430\u043d\u043d\u044b\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432\u0441\u0435 \u043f\u043e\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u041c\u0435\u0442\u043e\u0434: PATCH\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\\ \u0414\u0430\u043d\u043d\u044b\u0435: \u043f\u043e\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0445\u043e\u0442\u0438\u043c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c /auth/token/login \\ \u041c\u0435\u0442\u043e\u0434: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438\\ \u0414\u0430\u043d\u043d\u044b\u0435: { 'username': ..., 'password': ... } /auth/token/logout \\ \u041c\u0435\u0442\u043e\u0434: POST\\ \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0442\u043e\u043a\u0435\u043d","title":"\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0442\u043e\u0447\u043a\u0438 \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438"},{"location":"lab3/filters/","text":"Filters import django_filters as filters from lab3 import models class ReaderRegistrationDateRangeFilter(filters.FilterSet): date = filters.DateFromToRangeFilter(field_name='registration_date') class Meta: model = models.Reader fields = ['date'] class BookTakenDateRangeFilter(filters.FilterSet): date = filters.DateFromToRangeFilter(field_name='start_date') class Meta: model = models.ReaderBookHistory fields = ['date'] class RoomRegistrationDateRangeFilter(filters.FilterSet): date = filters.DateFromToRangeFilter(field_name='start_date') class Meta: model = models.ReaderRoomHistory fields = ['date']","title":"Filters"},{"location":"lab3/filters/#filters","text":"import django_filters as filters from lab3 import models class ReaderRegistrationDateRangeFilter(filters.FilterSet): date = filters.DateFromToRangeFilter(field_name='registration_date') class Meta: model = models.Reader fields = ['date'] class BookTakenDateRangeFilter(filters.FilterSet): date = filters.DateFromToRangeFilter(field_name='start_date') class Meta: model = models.ReaderBookHistory fields = ['date'] class RoomRegistrationDateRangeFilter(filters.FilterSet): date = filters.DateFromToRangeFilter(field_name='start_date') class Meta: model = models.ReaderRoomHistory fields = ['date']","title":"Filters"},{"location":"lab3/models/","text":"models from django.db import models from django.contrib.auth.models import AbstractUser class UserModel(AbstractUser): REQUIRED_FIELDS = ['first_name', 'last_name', 'email'] class Publisher(models.Model): name = models.CharField(max_length=100) def __str__(self): return str(self.name) class Section(models.Model): name = models.CharField(max_length=100) def __str__(self): return str(self.name) class Book(models.Model): title = models.CharField(max_length=100) section = models.ForeignKey('Section', related_name='books', on_delete=models.RESTRICT) publisher = models.ForeignKey('Publisher', related_name='books', on_delete=models.RESTRICT) year = models.IntegerField() authors = models.ManyToManyField('Author', related_name='books', through='BookAuthors') rooms = models.ManyToManyField('Room', related_name='books', through='BookInstance') def __str__(self): return f'{self.title}' class Author(models.Model): first_name = models.CharField(max_length=100) last_name = models.CharField(max_length=100) def __str__(self): return f'{self.first_name} {self.last_name}' class BookAuthors(models.Model): author = models.ForeignKey('Author', on_delete=models.RESTRICT) book = models.ForeignKey('Book', on_delete=models.RESTRICT) class BookInstance(models.Model): quality_types = ( ('b', 'bad'), ('g', 'good'), ('n', 'new') ) code = models.CharField(max_length=10, unique=True) book = models.ForeignKey('Book', related_name='instances', on_delete=models.RESTRICT) room = models.ForeignKey('Room', related_name='book_instances', on_delete=models.RESTRICT) quality = models.CharField(max_length=1, choices=quality_types) def __str__(self): return f'b:{self.book} r:{self.room} q:{self.quality}' class Room(models.Model): name = models.CharField(max_length=100) capacity = models.IntegerField() def __str__(self): return str(self.name) class Reader(models.Model): education_types = (('b', 'beginner'), ('m', 'middle'), ('h', 'higher'), ('d', 'degree')) reader_number= models.CharField(max_length=10) registration_date=models.DateField() active = models.BooleanField(default=True) first_name = models.CharField(max_length=100) last_name = models.CharField(max_length=100) passport_number = models.CharField(max_length=10) birth_date = models.DateField() address = models.CharField(max_length=200) mobile_number = models.CharField(max_length=12) education = models.CharField(max_length=1, choices=education_types) book_instances = models.ManyToManyField('BookInstance', related_name='readers', through='ReaderBookHistory') rooms = models.ManyToManyField('Room', related_name='readers', through='ReaderRoomHistory') def __str__(self): return f'{self.first_name} {self.last_name}' class ReaderBookHistory(models.Model): book_instance = models.ForeignKey('BookInstance', related_name='readers_history', on_delete=models.CASCADE) reader = models.ForeignKey('Reader', related_name='books_history', on_delete=models.RESTRICT) start_date = models.DateField() end_date = models.DateField(null=True, blank=True) class ReaderRoomHistory(models.Model): reader = models.ForeignKey('Reader', related_name='rooms_history', on_delete=models.RESTRICT) room = models.ForeignKey('Room', related_name='readers_history', on_delete=models.RESTRICT) start_date = models.DateField() end_date = models.DateField(null=True, blank=True) from django.db import models from django.contrib.auth.models import AbstractUser class UserModel(AbstractUser): REQUIRED_FIELDS = ['first_name', 'last_name', 'email'] class TestModel(models.Model): title = models.CharField(max_length=100) class Publisher(models.Model): name = models.CharField(max_length=100) def __str__(self): return str(self.name) class Section(models.Model): name = models.CharField(max_length=100) def __str__(self): return str(self.name) class Book(models.Model): title = models.CharField(max_length=100) section = models.ForeignKey('Section', related_name='books', on_delete=models.RESTRICT) publisher = models.ForeignKey('Publisher', related_name='books', on_delete=models.RESTRICT) year = models.IntegerField() authors = models.ManyToManyField('Author', related_name='books', through='BookAuthors') rooms = models.ManyToManyField('Room', related_name='books', through='BookInstance') def __str__(self): return f'{self.title}' class Author(models.Model): first_name = models.CharField(max_length=100) last_name = models.CharField(max_length=100) def __str__(self): return f'{self.first_name} {self.last_name}' class BookAuthors(models.Model): author = models.ForeignKey('Author', on_delete=models.RESTRICT) book = models.ForeignKey('Book', on_delete=models.RESTRICT) class BookInstance(models.Model): quality_types = ( ('b', 'bad'), ('g', 'good'), ('n', 'new') ) code = models.CharField(max_length=10, unique=True) book = models.ForeignKey('Book', related_name='instances', on_delete=models.RESTRICT) room = models.ForeignKey('Room', related_name='book_instances', on_delete=models.RESTRICT) quality = models.CharField(max_length=1, choices=quality_types) def __str__(self): return f'b:{self.book} r:{self.room} q:{self.quality}' class Room(models.Model): name = models.CharField(max_length=100) capacity = models.IntegerField() def __str__(self): return str(self.name) class Reader(models.Model): education_types = (('b', 'beginner'), ('m', 'middle'), ('h', 'higher'), ('d', 'degree')) reader_number= models.CharField(max_length=10) registration_date=models.DateField() active = models.BooleanField(default=True) first_name = models.CharField(max_length=100) last_name = models.CharField(max_length=100) passport_number = models.CharField(max_length=10) birth_date = models.DateField() address = models.CharField(max_length=200) mobile_number = models.CharField(max_length=12) education = models.CharField(max_length=1, choices=education_types) book_instances = models.ManyToManyField('BookInstance', related_name='readers', through='ReaderBookHistory') rooms = models.ManyToManyField('Room', related_name='readers', through='ReaderRoomHistory') def __str__(self): return f'{self.first_name} {self.last_name}' class ReaderBookHistory(models.Model): book_instance = models.ForeignKey('BookInstance', related_name='readers_history', on_delete=models.CASCADE) reader = models.ForeignKey('Reader', related_name='books_history', on_delete=models.RESTRICT) start_date = models.DateField() end_date = models.DateField(null=True, blank=True) class ReaderRoomHistory(models.Model): reader = models.ForeignKey('Reader', related_name='rooms_history', on_delete=models.RESTRICT) room = models.ForeignKey('Room', related_name='readers_history', on_delete=models.RESTRICT) start_date = models.DateField() end_date = models.DateField(null=True, blank=True)","title":"models"},{"location":"lab3/models/#models","text":"from django.db import models from django.contrib.auth.models import AbstractUser class UserModel(AbstractUser): REQUIRED_FIELDS = ['first_name', 'last_name', 'email'] class Publisher(models.Model): name = models.CharField(max_length=100) def __str__(self): return str(self.name) class Section(models.Model): name = models.CharField(max_length=100) def __str__(self): return str(self.name) class Book(models.Model): title = models.CharField(max_length=100) section = models.ForeignKey('Section', related_name='books', on_delete=models.RESTRICT) publisher = models.ForeignKey('Publisher', related_name='books', on_delete=models.RESTRICT) year = models.IntegerField() authors = models.ManyToManyField('Author', related_name='books', through='BookAuthors') rooms = models.ManyToManyField('Room', related_name='books', through='BookInstance') def __str__(self): return f'{self.title}' class Author(models.Model): first_name = models.CharField(max_length=100) last_name = models.CharField(max_length=100) def __str__(self): return f'{self.first_name} {self.last_name}' class BookAuthors(models.Model): author = models.ForeignKey('Author', on_delete=models.RESTRICT) book = models.ForeignKey('Book', on_delete=models.RESTRICT) class BookInstance(models.Model): quality_types = ( ('b', 'bad'), ('g', 'good'), ('n', 'new') ) code = models.CharField(max_length=10, unique=True) book = models.ForeignKey('Book', related_name='instances', on_delete=models.RESTRICT) room = models.ForeignKey('Room', related_name='book_instances', on_delete=models.RESTRICT) quality = models.CharField(max_length=1, choices=quality_types) def __str__(self): return f'b:{self.book} r:{self.room} q:{self.quality}' class Room(models.Model): name = models.CharField(max_length=100) capacity = models.IntegerField() def __str__(self): return str(self.name) class Reader(models.Model): education_types = (('b', 'beginner'), ('m', 'middle'), ('h', 'higher'), ('d', 'degree')) reader_number= models.CharField(max_length=10) registration_date=models.DateField() active = models.BooleanField(default=True) first_name = models.CharField(max_length=100) last_name = models.CharField(max_length=100) passport_number = models.CharField(max_length=10) birth_date = models.DateField() address = models.CharField(max_length=200) mobile_number = models.CharField(max_length=12) education = models.CharField(max_length=1, choices=education_types) book_instances = models.ManyToManyField('BookInstance', related_name='readers', through='ReaderBookHistory') rooms = models.ManyToManyField('Room', related_name='readers', through='ReaderRoomHistory') def __str__(self): return f'{self.first_name} {self.last_name}' class ReaderBookHistory(models.Model): book_instance = models.ForeignKey('BookInstance', related_name='readers_history', on_delete=models.CASCADE) reader = models.ForeignKey('Reader', related_name='books_history', on_delete=models.RESTRICT) start_date = models.DateField() end_date = models.DateField(null=True, blank=True) class ReaderRoomHistory(models.Model): reader = models.ForeignKey('Reader', related_name='rooms_history', on_delete=models.RESTRICT) room = models.ForeignKey('Room', related_name='readers_history', on_delete=models.RESTRICT) start_date = models.DateField() end_date = models.DateField(null=True, blank=True) from django.db import models from django.contrib.auth.models import AbstractUser class UserModel(AbstractUser): REQUIRED_FIELDS = ['first_name', 'last_name', 'email'] class TestModel(models.Model): title = models.CharField(max_length=100) class Publisher(models.Model): name = models.CharField(max_length=100) def __str__(self): return str(self.name) class Section(models.Model): name = models.CharField(max_length=100) def __str__(self): return str(self.name) class Book(models.Model): title = models.CharField(max_length=100) section = models.ForeignKey('Section', related_name='books', on_delete=models.RESTRICT) publisher = models.ForeignKey('Publisher', related_name='books', on_delete=models.RESTRICT) year = models.IntegerField() authors = models.ManyToManyField('Author', related_name='books', through='BookAuthors') rooms = models.ManyToManyField('Room', related_name='books', through='BookInstance') def __str__(self): return f'{self.title}' class Author(models.Model): first_name = models.CharField(max_length=100) last_name = models.CharField(max_length=100) def __str__(self): return f'{self.first_name} {self.last_name}' class BookAuthors(models.Model): author = models.ForeignKey('Author', on_delete=models.RESTRICT) book = models.ForeignKey('Book', on_delete=models.RESTRICT) class BookInstance(models.Model): quality_types = ( ('b', 'bad'), ('g', 'good'), ('n', 'new') ) code = models.CharField(max_length=10, unique=True) book = models.ForeignKey('Book', related_name='instances', on_delete=models.RESTRICT) room = models.ForeignKey('Room', related_name='book_instances', on_delete=models.RESTRICT) quality = models.CharField(max_length=1, choices=quality_types) def __str__(self): return f'b:{self.book} r:{self.room} q:{self.quality}' class Room(models.Model): name = models.CharField(max_length=100) capacity = models.IntegerField() def __str__(self): return str(self.name) class Reader(models.Model): education_types = (('b', 'beginner'), ('m', 'middle'), ('h', 'higher'), ('d', 'degree')) reader_number= models.CharField(max_length=10) registration_date=models.DateField() active = models.BooleanField(default=True) first_name = models.CharField(max_length=100) last_name = models.CharField(max_length=100) passport_number = models.CharField(max_length=10) birth_date = models.DateField() address = models.CharField(max_length=200) mobile_number = models.CharField(max_length=12) education = models.CharField(max_length=1, choices=education_types) book_instances = models.ManyToManyField('BookInstance', related_name='readers', through='ReaderBookHistory') rooms = models.ManyToManyField('Room', related_name='readers', through='ReaderRoomHistory') def __str__(self): return f'{self.first_name} {self.last_name}' class ReaderBookHistory(models.Model): book_instance = models.ForeignKey('BookInstance', related_name='readers_history', on_delete=models.CASCADE) reader = models.ForeignKey('Reader', related_name='books_history', on_delete=models.RESTRICT) start_date = models.DateField() end_date = models.DateField(null=True, blank=True) class ReaderRoomHistory(models.Model): reader = models.ForeignKey('Reader', related_name='rooms_history', on_delete=models.RESTRICT) room = models.ForeignKey('Room', related_name='readers_history', on_delete=models.RESTRICT) start_date = models.DateField() end_date = models.DateField(null=True, blank=True)","title":"models"},{"location":"lab3/practice3_1/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0443 \u0437\u0434\u0435\u0441\u044c \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1 \u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 1 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041a\u043e\u0434: from project_first_app.models import Car, UserOwner, CarOwn, OwnerLicence from django.contrib.auth import get_user_model user_model = get_user_model() c1 = Car(id=1, serial_number='AA001A', model='toyota', color='black') c1.save() c2 = Car(id=2, serial_number='AA002A', model='toyota', color='white') c2.save() c3 = Car(id=3, serial_number='AA003A', model='toyota', color='orange') c3.save() c4 = Car(id=4, serial_number='AA004A', model='ford', color='black') c4.save() c5 = Car(id=5, serial_number='AA005A', model='ford', color='white') c5.save() c6 = Car(id=6, serial_number='AA006A', model='ford', color='orange') u1 = user_model(username='vasy001', first_name='Vasy', last_name='Pupkin', passport_number='00001000001') u1.save() u2 = user_model(username='vasy002', first_name='Ivan', last_name='Kotov', passport_number='00001000002') u2.save() u3 = user_model(username='vasy003', first_name='Vasy', last_name='Kozlov', passport_number='00001000003') u3.save() u4 = user_model(username='vasy004', first_name='Vasy', last_name='User', passport_number='00001000004') u4.save() u5 = user_model(username='vasy005', first_name='Jojo', last_name='Reference', passport_number='00001000005') u5.save() u6 = user_model(username='vasy006', first_name='Ivan', last_name='User', passport_number='00001000006') u6.save() car_own_list = [[u1, c1, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'], [u1, c2, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'], [u2, c1, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00'], [u2, c2, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00'], [u3, c3, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'], [u4, c3, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00'], [u4, c4, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'], [u5, c4, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00'], [u5, c5, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'], [u5, c6, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00']] for owner, car, start_date, end_date in car_own_list: print(car, owner) CarOwn(owner=owner, car=car, start_date=start_date, end_date=end_date).save() for i, user in enumerate([u1, u2, u3, u4, u5, u6]): OwnerLicence(owner=user, Licence_number=f'000{i}', licence_type='default', issue_date='2022-11-01').save() \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: Car.objects.all() <QuerySet [<Car: AA001A>, <Car: AA002A>, <Car: AA003A>, <Car: AA004A>, <Car: AA005A>]> UserOwner.objects.all() <QuerySet [<UserOwner: vasy001>, <UserOwner: vasy002>, <UserOwner: vasy003>, <UserOwner: vasy004>, <UserOwner: vasy005>, <UserOwner: vasy006>]> CarOwn.objects.all() <QuerySet [<CarOwn: vasy001 AA001A 2022-10-31 2022-11-03>, <CarOwn: vasy001 AA002A 2022-10-31 2022-11-03>, <CarOwn: vasy002 AA001A 2022-11-03 2022-11-09>, <CarOwn: vasy002 AA002A 2022-11-03 2022-11-09>, <CarOwn: vasy003 AA003A 2022-10-31 2022-11-03>, <CarOwn: vasy004 AA003A 2022-11-03 2022-11-09>, <CarOwn: vasy004 AA004A 2022-10-31 2022-11-03>, <CarOwn: vasy005 AA004A 2022-11-03 2022-11-09>, <CarOwn: vasy005 AA005A 2022-10-31 2022-11-03>]> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) Car.objects.filter(model='ford') <QuerySet [<Car: AA004A>, <Car: AA005A>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) UserOwner.objects.filter(first_name='Vasy') <QuerySet [<UserOwner: vasy001>, <UserOwner: vasy003>, <UserOwner: vasy004>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) from random import choice rand_user = choice(user_model.objects.all()) _id = rand_user.id licence = rand_user.owner_licence.get() licence <OwnerLicence: vasy003 0002> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) UserOwner.objects.filter(owner_car__car__color='black') UserOwner.objects.filter(cars__color='black') <QuerySet [<UserOwner: vasy001>, <UserOwner: vasy002>, <UserOwner: vasy004>, <UserOwner: vasy005>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) UserOwner.objects.filter(owner_car__start_date__year='2022').distinct() <QuerySet [<UserOwner: vasy001>, <UserOwner: vasy002>, <UserOwner: vasy003>, <UserOwner: vasy004>, <UserOwner: vasy005>]> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f OwnerLicence.objects.aggregate(max_issue_date = models.Max('issue_date')) {'max_issue_date': datetime.date(2022, 11, 1)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 CarOwn.objects.aggregate(latest_start_date=models.Max('start_date')) {'latest_start_date': datetime.datetime(2022, 11, 3, 21, 0, tzinfo=datetime.timezone.utc)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f count_by_user = UserOwner.objects.annotate(count=models.Count('owner_car')) for user_count in count_by_user: print(user_count.username, user_count.count) vsevolod026 0 vasy001 2 vasy002 2 vasy003 1 vasy004 2 vasy005 2 vasy006 0 \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 count_by_model = Car.objects.values('model').annotate(count=models.Count('id')) for model_counter in count_by_model: print(model_counter['model'], model_counter['count']) ford 2 toyota 3 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f OwnerLicence.objects.order_by('issue_date') <QuerySet [<OwnerLicence: vasy001 0000>, <OwnerLicence: vasy002 0001>, <OwnerLicence: vasy003 0002>, <OwnerLicence: vasy004 0003>, <OwnerLicence: vasy005 0004>, <OwnerLicence: vasy006 0005>]>","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430"},{"location":"lab3/practice3_1/#_1","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430"},{"location":"lab3/practice3_1/#_2","text":"","title":"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0443 \u0437\u0434\u0435\u0441\u044c"},{"location":"lab3/practice3_1/#31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 3.1"},{"location":"lab3/practice3_1/#1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. \u041a\u043e\u0434: from project_first_app.models import Car, UserOwner, CarOwn, OwnerLicence from django.contrib.auth import get_user_model user_model = get_user_model() c1 = Car(id=1, serial_number='AA001A', model='toyota', color='black') c1.save() c2 = Car(id=2, serial_number='AA002A', model='toyota', color='white') c2.save() c3 = Car(id=3, serial_number='AA003A', model='toyota', color='orange') c3.save() c4 = Car(id=4, serial_number='AA004A', model='ford', color='black') c4.save() c5 = Car(id=5, serial_number='AA005A', model='ford', color='white') c5.save() c6 = Car(id=6, serial_number='AA006A', model='ford', color='orange') u1 = user_model(username='vasy001', first_name='Vasy', last_name='Pupkin', passport_number='00001000001') u1.save() u2 = user_model(username='vasy002', first_name='Ivan', last_name='Kotov', passport_number='00001000002') u2.save() u3 = user_model(username='vasy003', first_name='Vasy', last_name='Kozlov', passport_number='00001000003') u3.save() u4 = user_model(username='vasy004', first_name='Vasy', last_name='User', passport_number='00001000004') u4.save() u5 = user_model(username='vasy005', first_name='Jojo', last_name='Reference', passport_number='00001000005') u5.save() u6 = user_model(username='vasy006', first_name='Ivan', last_name='User', passport_number='00001000006') u6.save() car_own_list = [[u1, c1, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'], [u1, c2, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'], [u2, c1, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00'], [u2, c2, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00'], [u3, c3, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'], [u4, c3, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00'], [u4, c4, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'], [u5, c4, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00'], [u5, c5, '2022-11-01 00:00:00+03:00', '2022-11-04 00:00:00+03:00'], [u5, c6, '2022-11-04 00:00:00+03:00', '2022-11-10 00:00:00+03:00']] for owner, car, start_date, end_date in car_own_list: print(car, owner) CarOwn(owner=owner, car=car, start_date=start_date, end_date=end_date).save() for i, user in enumerate([u1, u2, u3, u4, u5, u6]): OwnerLicence(owner=user, Licence_number=f'000{i}', licence_type='default', issue_date='2022-11-01').save() \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: Car.objects.all() <QuerySet [<Car: AA001A>, <Car: AA002A>, <Car: AA003A>, <Car: AA004A>, <Car: AA005A>]> UserOwner.objects.all() <QuerySet [<UserOwner: vasy001>, <UserOwner: vasy002>, <UserOwner: vasy003>, <UserOwner: vasy004>, <UserOwner: vasy005>, <UserOwner: vasy006>]> CarOwn.objects.all() <QuerySet [<CarOwn: vasy001 AA001A 2022-10-31 2022-11-03>, <CarOwn: vasy001 AA002A 2022-10-31 2022-11-03>, <CarOwn: vasy002 AA001A 2022-11-03 2022-11-09>, <CarOwn: vasy002 AA002A 2022-11-03 2022-11-09>, <CarOwn: vasy003 AA003A 2022-10-31 2022-11-03>, <CarOwn: vasy004 AA003A 2022-11-03 2022-11-09>, <CarOwn: vasy004 AA004A 2022-10-31 2022-11-03>, <CarOwn: vasy005 AA004A 2022-11-03 2022-11-09>, <CarOwn: vasy005 AA005A 2022-10-31 2022-11-03>]>","title":"\u0423\u043f\u0440\u0430\u0436\u043d\u0435\u043d\u0438\u0435 1"},{"location":"lab3/practice3_1/#2","text":"\u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) Car.objects.filter(model='ford') <QuerySet [<Car: AA004A>, <Car: AA005A>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) UserOwner.objects.filter(first_name='Vasy') <QuerySet [<UserOwner: vasy001>, <UserOwner: vasy003>, <UserOwner: vasy004>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) from random import choice rand_user = choice(user_model.objects.all()) _id = rand_user.id licence = rand_user.owner_licence.get() licence <OwnerLicence: vasy003 0002> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) UserOwner.objects.filter(owner_car__car__color='black') UserOwner.objects.filter(cars__color='black') <QuerySet [<UserOwner: vasy001>, <UserOwner: vasy002>, <UserOwner: vasy004>, <UserOwner: vasy005>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) UserOwner.objects.filter(owner_car__start_date__year='2022').distinct() <QuerySet [<UserOwner: vasy001>, <UserOwner: vasy002>, <UserOwner: vasy003>, <UserOwner: vasy004>, <UserOwner: vasy005>]>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab3/practice3_1/#3","text":"\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f OwnerLicence.objects.aggregate(max_issue_date = models.Max('issue_date')) {'max_issue_date': datetime.date(2022, 11, 1)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 CarOwn.objects.aggregate(latest_start_date=models.Max('start_date')) {'latest_start_date': datetime.datetime(2022, 11, 3, 21, 0, tzinfo=datetime.timezone.utc)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f count_by_user = UserOwner.objects.annotate(count=models.Count('owner_car')) for user_count in count_by_user: print(user_count.username, user_count.count) vsevolod026 0 vasy001 2 vasy002 2 vasy003 1 vasy004 2 vasy005 2 vasy006 0 \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 count_by_model = Car.objects.values('model').annotate(count=models.Count('id')) for model_counter in count_by_model: print(model_counter['model'], model_counter['count']) ford 2 toyota 3 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f OwnerLicence.objects.order_by('issue_date') <QuerySet [<OwnerLicence: vasy001 0000>, <OwnerLicence: vasy002 0001>, <OwnerLicence: vasy003 0002>, <OwnerLicence: vasy004 0003>, <OwnerLicence: vasy005 0004>, <OwnerLicence: vasy006 0005>]>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab3/serializers/","text":"Serializers from lab3 import models from rest_framework import serializers class AuthorSerializer(serializers.ModelSerializer): class Meta: model = models.Author exclude = ['id'] class BookSerializer(serializers.ModelSerializer): section = serializers.StringRelatedField(read_only=True) publisher = serializers.StringRelatedField(read_only=True) authors = AuthorSerializer(many=True) class Meta: model = models.Book exclude = ['rooms', 'id'] class BookCreateSerializer(serializers.ModelSerializer): authors = serializers.PrimaryKeyRelatedField( many=True, queryset=models.Author.objects.all() ) class Meta: model = models.Book exclude = ['rooms', 'id'] class BookInstanceSerializer(serializers.ModelSerializer): book = BookSerializer(many=False) class Meta: model = models.BookInstance exclude = ['id'] class BookInstanceCreateSerializer(serializers.ModelSerializer): class Meta: model = models.BookInstance exclude = ['id'] class ReaderSerializer(serializers.ModelSerializer): class Meta: model = models.Reader exclude = ['education', 'rooms', 'book_instances'] class StatisticsEducationSerializer(serializers.Serializer): degree = serializers.FloatField() higher = serializers.FloatField() middle = serializers.FloatField() beginner = serializers.FloatField() class StatisticsAgeSerializer(serializers.Serializer): under_20 = serializers.FloatField() after_20 = serializers.FloatField() class StatisticsSerializer(serializers.Serializer): books_taken = serializers.IntegerField() new_readers = serializers.IntegerField()","title":"Serializers"},{"location":"lab3/serializers/#serializers","text":"from lab3 import models from rest_framework import serializers class AuthorSerializer(serializers.ModelSerializer): class Meta: model = models.Author exclude = ['id'] class BookSerializer(serializers.ModelSerializer): section = serializers.StringRelatedField(read_only=True) publisher = serializers.StringRelatedField(read_only=True) authors = AuthorSerializer(many=True) class Meta: model = models.Book exclude = ['rooms', 'id'] class BookCreateSerializer(serializers.ModelSerializer): authors = serializers.PrimaryKeyRelatedField( many=True, queryset=models.Author.objects.all() ) class Meta: model = models.Book exclude = ['rooms', 'id'] class BookInstanceSerializer(serializers.ModelSerializer): book = BookSerializer(many=False) class Meta: model = models.BookInstance exclude = ['id'] class BookInstanceCreateSerializer(serializers.ModelSerializer): class Meta: model = models.BookInstance exclude = ['id'] class ReaderSerializer(serializers.ModelSerializer): class Meta: model = models.Reader exclude = ['education', 'rooms', 'book_instances'] class StatisticsEducationSerializer(serializers.Serializer): degree = serializers.FloatField() higher = serializers.FloatField() middle = serializers.FloatField() beginner = serializers.FloatField() class StatisticsAgeSerializer(serializers.Serializer): under_20 = serializers.FloatField() after_20 = serializers.FloatField() class StatisticsSerializer(serializers.Serializer): books_taken = serializers.IntegerField() new_readers = serializers.IntegerField()","title":"Serializers"},{"location":"lab3/views/","text":"from rest_framework import generics, permissions, views, exceptions from rest_framework.response import Response from lab3 import serializers, models, filters from django.db import models as dj_models from scripts import create_db_data from datetime import datetime,timedelta from abc import abstractmethod class ApiViewSingleObject(generics.GenericAPIView): def get(self, request, *args, **kwargs): _object = self.get_object_for_get() serializer = self.get_serializer(_object, many=False) return Response(serializer.data) @abstractmethod def get_object_for_get(self): raise NotImplemented('You must implement get_object_for_get') class InitDataView(views.APIView): def get(self, request): create_db_data.run() return Response({'date': []}, status=200) class ReaderBooksApiView(generics.ListAPIView): serializer_class = serializers.BookInstanceSerializer def get_queryset(self): reader_pk = self.kwargs.get('reader_pk', None) if reader_pk is None: raise exceptions.ValidationError('Specify reader_pk in url') reader_books_qs = models.ReaderBookHistory.objects.filter(reader_id=reader_pk, end_date__isnull=True) # todo values list \u0432\u043e\u0432\u0437\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0441\u0435. \u041f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u0442\u044c instances_id = set(reader_books_qs.values_list('book_instance', flat=True)) instances = models.BookInstance.objects.filter(id__in=instances_id) return instances class OutdatedReadersApiView(generics.ListAPIView): serializer_class = serializers.ReaderSerializer def get_queryset(self): year_ago = datetime.now() - timedelta(days=365) outdated_qs = models.Reader.objects.filter(registration_date__lt=year_ago, active=True) return outdated_qs class ReaderRareBook(generics.ListAPIView): serializer_class = serializers.ReaderSerializer def get_queryset(self): book_cnt = models.Book.objects.annotate( instances_cnt=dj_models.Count('instances') ) rare_books_qs = book_cnt.filter(instances_cnt__lte=2) rare_books_id = set(rare_books_qs.values_list('id', flat=True)) rare_inst_qs = models.BookInstance.objects.filter(book_id__in=rare_books_id) rare_reader_ids = set(rare_inst_qs.values_list('readers', flat=True)) rare_readers = models.Reader.objects.filter(id__in=rare_reader_ids) return rare_readers class ReaderBookMonthAgoApi(generics.ListAPIView): serializer_class = serializers.ReaderSerializer def get_queryset(self): month_ago = datetime.now() - timedelta(days=30) reader_history = models.ReaderBookHistory.objects.filter( start_date__lt=month_ago, end_date__isnull=True ) reader_ids = set(reader_history.values_list('reader', flat=True)) readers = models.Reader.objects.filter(id__in=reader_ids) return readers class StatisticsEducationApiView(ApiViewSingleObject): permission_classes = (permissions.IsAuthenticated,) serializer_class = serializers.StatisticsEducationSerializer def get_object_for_get(self): qs = models.Reader.objects.all() active_qs = qs.filter(active=True) active_users = len(active_qs) edu_stat_list = active_qs.values('education').annotate(cnt=dj_models.Count('id')) edu_code_to_title = dict(models.Reader.education_types) res = {} for edu_stat in edu_stat_list: edu_code = edu_stat['education'] cnt = edu_stat['cnt'] edu_title = edu_code_to_title[edu_code] res[edu_title] = round(cnt / active_users, 3) return res class StatisticsAgeApiView(ApiViewSingleObject): serializer_class = serializers.StatisticsAgeSerializer def get_object_for_get(self): qs = models.Reader.objects.all() active_qs = qs.filter(active=True) active_users = len(active_qs) n = datetime.now() birthdate_18 = datetime(year=n.year - 20, month=n.month, day=n.day) age_stat = active_qs.aggregate( under_20=dj_models.Count( 'id', filter=dj_models.Q(birth_date__gt=birthdate_18) ), after_20=dj_models.Count( 'id', filter=dj_models.Q(birth_date__lte=birthdate_18) )) for k, v in age_stat.items(): age_stat[k] = round(v / active_users, 3) return age_stat class StatisticsLibraryApiView(ApiViewSingleObject): serializer_class = serializers.StatisticsSerializer def get_object_for_get(self): qs_reader = filters.ReaderRegistrationDateRangeFilter(self.request.GET).qs new_readers = qs_reader.count() qs_books = filters.BookTakenDateRangeFilter(self.request.GET).qs books_taken = qs_books.count() return {'new_readers': new_readers, 'books_taken': books_taken} class StatisticsRoomApiView(ApiViewSingleObject): serializer_class = serializers.StatisticsSerializer queryset = models.Room.objects.all() def get_object_for_get(self): qs_book_taken = filters.BookTakenDateRangeFilter( self.request.GET ).qs books_taken = qs_book_taken.count() room = self.get_object() qs_reader_history = room.readers_history qs_reader_history = filters.RoomRegistrationDateRangeFilter( self.request.GET, queryset=qs_reader_history ).qs new_readers = qs_reader_history.count() return {'books_taken': books_taken, 'new_readers': new_readers} class ReaderCreateApiView(generics.CreateAPIView): serializer_class = serializers.ReaderSerializer queryset = models.Reader.objects.all() class BookInstanceRemoveApiView(generics.RetrieveDestroyAPIView): queryset = models.BookInstance.objects.all() serializer_class = serializers.BookInstanceSerializer class BookInstanceCreateView(generics.CreateAPIView): serializer_class = serializers.BookInstanceCreateSerializer class BookCreateView(generics.CreateAPIView): serializer_class = serializers.BookCreateSerializer","title":"Views"},{"location":"lab4/book_instances/","text":"\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u043a\u043d\u0438\u0433 \u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u043a\u043d\u0438\u0433\u0438 \u0438 \u0438\u0445 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b","title":"\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u043a\u043d\u0438\u0433"},{"location":"lab4/book_instances/#_1","text":"\u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u043a\u043d\u0438\u0433\u0438 \u0438 \u0438\u0445 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b","title":"\u042d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u044b \u043a\u043d\u0438\u0433"},{"location":"lab4/login_registration/","text":"\u041b\u043e\u0433\u0438\u043d, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0437\u0430\u0440\u0435\u0433\u0435\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0421\u0442\u0430\u043d\u0438\u0446\u0430 \u043b\u043e\u0433\u0438\u043d\u0430 \u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0441\u0435\u0431\u0435","title":"\u041b\u043e\u0433\u0438\u043d, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"lab4/login_registration/#_1","text":"","title":"\u041b\u043e\u0433\u0438\u043d, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"lab4/login_registration/#_2","text":"\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0437\u0430\u0440\u0435\u0433\u0435\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f"},{"location":"lab4/login_registration/#_3","text":"\u0412\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c","title":"\u0421\u0442\u0430\u043d\u0438\u0446\u0430 \u043b\u043e\u0433\u0438\u043d\u0430"},{"location":"lab4/login_registration/#_4","text":"\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0441\u0435\u0431\u0435","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab4/practice_4/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0437\u0434\u0435\u0441\u044c","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 "},{"location":"lab4/practice_4/#_1","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u0437\u0434\u0435\u0441\u044c"},{"location":"lab4/reader/","text":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u043c\u0438 \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 \u0441\u043f\u0438\u0441\u043a\u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0438\u0436\u0435 \u0441\u043f\u0438\u0441\u043a\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0440\u0435\u0434\u043a\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044e","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u043c\u0438"},{"location":"lab4/reader/#_1","text":"","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f\u043c\u0438"},{"location":"lab4/reader/#_2","text":"\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0438\u0436\u0435 \u0441\u043f\u0438\u0441\u043a\u043e \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0440\u0435\u0434\u043a\u0438\u0435 \u043a\u043d\u0438\u0433\u0438","title":"\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439 \u0441\u043f\u0438\u0441\u043a\u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u0435\u0439"},{"location":"lab4/reader/#_3","text":"","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044f"},{"location":"lab4/reader/#_4","text":"","title":"\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433\u0438 \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044e"},{"location":"lab4/statistics/","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u043e\u0439 \u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u043e\u0439"},{"location":"lab4/statistics/#_1","text":"\u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u0443\u044e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441\u043e \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u043e\u0439"}]}